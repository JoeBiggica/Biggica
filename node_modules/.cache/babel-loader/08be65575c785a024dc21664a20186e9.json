{"ast":null,"code":"import _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport React from \"react\";\nimport { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux'; //import { toggleTap, incrementCount, decrementCount } from '../redux/actions';\n\nimport Header from \"../components/header\";\nimport HeroBanner from \"../components/herobanner\";\nimport GlobalStyles from \"../styles/styles.scss\";\n\nvar Index =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Index, _Component);\n\n  function Index() {\n    _classCallCheck(this, Index);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Index).apply(this, arguments));\n  }\n\n  _createClass(Index, [{\n    key: \"render\",\n    // toggle = () => {\n    // \tconst { toggleTap } = this.props\n    // \ttoggleTap()\n    // }\n    // increment = () => {\n    // \tconst { incrementCount } = this.props\n    // \tincrementCount()\n    // }\n    // decrement = () => {\n    // \tconst { decrementCount } = this.props\n    // \tdecrementCount()\n    // }\n    value: function render() {\n      return React.createElement(React.Fragment, null, React.createElement(Header, null), React.createElement(\"section\", null, React.createElement(HeroBanner, {\n        text: \"Web engineer specializing in front-end development and modern frameworks\"\n      })));\n    }\n  }], [{\n    key: \"getInitialProps\",\n    value: function getInitialProps(_ref) {\n      var reduxStore = _ref.reduxStore,\n          req = _ref.req;\n      var isServer = !!req;\n      return {};\n    }\n  }]);\n\n  return Index;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    tap: state.tap,\n    count: state.count\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {};\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Index);","map":{"version":3,"sources":["/Users/joebiggica/Engineering/Apps/Biggica/pages/Index.jsx"],"names":["Index","Component","reduxStore","req","isServer","mapStateToProps","tap","state","count","mapDispatchToProps","connect"],"mappings":";;;;;;AAAA,SAAA,SAAA,QAAA,OAAA;AACA,SAAA,OAAA,QAAA,aAAA;AACA,SAAA,kBAAA,QAAA,OAAA,C,CACA;;AACA,OAAA,MAAA;AACA,OAAA,UAAA;AAEA,OAAA,YAAA;;IAEMA,K;;;;;;;;;;;;;AAOL;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;6BAES;AACR,aACC,KAAA,CAAA,aAAA,CAAA,KAAA,CAAA,QAAA,EAAA,IAAA,EACC,KAAA,CAAA,aAAA,CAAA,MAAA,EADD,IACC,CADD,EAEC,KAAA,CAAA,aAAA,CAAA,SAAA,EAAA,IAAA,EACC,KAAA,CAAA,aAAA,CAAA,UAAA,EAAA;AAAY,QAAA,IAAI,EAAC;AAAjB,OAAA,CADD,CAFD,CADD;AAQA;;;0CA9B4C;AAAA,UAAnBE,UAAmB,GAAA,IAAA,CAAnBA,UAAmB;AAAA,UAAPC,GAAO,GAAA,IAAA,CAAPA,GAAO;AAC5C,UAAMC,QAAQ,GAAG,CAAC,CAAlB,GAAA;AAEA,aAAA,EAAA;AACA;;;;EALkBH,S;;AAkCpB,IAAMI,eAAe,GAAG,SAAlBA,eAAkB,CAAA,KAAA,EAAS;AAChC,SAAO;AACNC,IAAAA,GAAG,EAAEC,KAAK,CADJ,GAAA;AAENC,IAAAA,KAAK,EAAED,KAAK,CAACC;AAFP,GAAP;AADD,CAAA;;AAOA,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,CAAA,QAAA,EAAY;AACtC,SAAA,EAAA;AADD,CAAA;;AAIA,eAAeC,OAAO,CAAA,eAAA,EAAPA,kBAAO,CAAPA,CAAf,KAAeA,CAAf","sourcesContent":["import { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\n//import { toggleTap, incrementCount, decrementCount } from '../redux/actions';\nimport Header from 'components/header';\nimport HeroBanner from 'components/herobanner';\n\nimport GlobalStyles from 'styles/styles.scss';\n\nclass Index extends Component {\n\tstatic getInitialProps ({ reduxStore, req }) {\n\t\tconst isServer = !!req\n\n\t\treturn {}\n\t}\n\n\t// toggle = () => {\n\t// \tconst { toggleTap } = this.props\n\t// \ttoggleTap()\n\t// }\n\n\t// increment = () => {\n\t// \tconst { incrementCount } = this.props\n\t// \tincrementCount()\n\t// }\n\n\t// decrement = () => {\n\t// \tconst { decrementCount } = this.props\n\t// \tdecrementCount()\n\t// }\n\n\trender() {\n\t\treturn (\n\t\t\t<>\n\t\t\t\t<Header />\n\t\t\t\t<section>\n\t\t\t\t\t<HeroBanner text='Web engineer specializing in front-end development and modern frameworks' />\n\t\t\t\t</section>\n\t\t\t</>\n\t\t)\n\t}\n}\n\nconst mapStateToProps = state => {\n\treturn {\n\t\ttap: state.tap,\n\t\tcount: state.count\n\t}\n}\n\nconst mapDispatchToProps = dispatch => {\n\treturn {};\n}\n\nexport default connect(\n\tmapStateToProps,\n\tmapDispatchToProps\n)(Index);\n"]},"metadata":{},"sourceType":"module"}